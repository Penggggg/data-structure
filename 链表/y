# 技巧（插入结点）

```
给定a结点，a后插入b

b.next = a.next
a.next = b
```

# 技巧（删除结点）

```
给定a结点，删除a后的结点

a.next = a.next.next;
```

# 算法（中间结点）

### 链表的中间结点

> 快慢指针，通过速度比例差，可以给一个链表【按比例】划分不同的段，可用来计算链表长度、中点。同时，快指针可以【先走n】步，再跟慢指针同步走，以此来划分【不等比、但等差值】的长短段（删除倒数第n个结点）

```
【快慢指针速度差】核心代码：

slow = slow.next;
fast = fast.next.next;

特殊处理：分别为：偶、奇的情况
if ( !fast.next || !fast.next.next ) return slow;
```

# 算法（反转）

### 单链表反转

> 画出相邻2个结点，变化前后的图

```
【反转】的核心代码：
cur.next = pre;

递归：
const reverse = ( pre, cur ) => {
    if ( !cur ) return pre;
    cur.next = pre;
    reverse( cur, cur.next )
}

特殊处理、起点：
reverse( null, head );
```

### K个一组反转

```
题目：

1->2->3->4->5
K = 2 时，应当返回: 2->1 -> 4->3 ->5
```

> 一组组地处理，通过递归，跳去下一组 ( 画图处理 )

```
【一组组地处理】的核心代码：

const reverseGroup = ( cur, K ) => {
    // ... 【反转】该组结点
    
    // 下一组
    reverseGroup( 下一组的第一个结点 ,K );
}


特殊处理、每组之间的关系：
这一组的第一位（未排序前）.next = 下一组的最后一个（未排序前）

head.next = reverseKGroup(cur, k);

// 因此，reverseKGroup -> return 本组最后一个
```

# 算法（环）

### 链表中环的检测

> 快慢指针，无论结点个数是奇/偶，都会相遇。

```
【快慢指针】的核心代码

slow = slow.next;
fast = fast.next.next;

【是否为环】的核心代码：
fast === slow，return true

边界情况：
1、传入0个、1个结点，则 return false
2、非环：fast.next === undefind || fast.next.next === undefind，return false
```

# 算法（合并）

### 两个有序的链表的合并

```
输入：1->2->4, 1->3->4
输出：1->1->2->3->4->4
```

> 通过直接改变结点的next，可以以0个空间复杂度，返回合并后的链表

```
【合并】的核心代码：
if ( l1.val < l2.val ) {
    l1.next = merge( l1.next, l2 ); // 等号左边的l1.next为改变指针，右边的l1.next为l1的下一个结点
    return l1;
}

【递归】的核心代码：
const merge = ( l1, l2 ) {
    if (...) {
        l1.next = merge( l1.next, l2 );
    }
}

特殊情况：当一段已经遍历完了，则返回另一段剩余的。
if ( !l1 ) return l2;
if ( !l2 ) return l1;
```

# 算法（删除链表倒数第 n 个结点）

> 快慢指针。快指针可【先走n步】，然后再跟慢指针同步走。以此找到需要删除的结点。另外，删除操作是基于倒数n-1个结点的，所以实际情况应该是找倒数n-1。

```
【先走n+1步】核心代码：
while( j++ < n+1 ) {
    fast = fast.next;
}

【同步走】核心代码：
while( ... ) {
    fast = fast.next;
    slow = slow.next;
}

【找到倒数第n-1个结点】核心代码：
if( !fast.next ) {
    return slow;
}

【删除】核心代码：
slow.next = slow.next.next;
```

























